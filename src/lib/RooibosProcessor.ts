
import * as path from 'path';

import { CodeCoverageProcessor } from './CodeCoverageProcessor';
import { getFeedbackErrors, getFeedbackWarnings } from './Feedback';
import File from './File';
import FunctionMap from './FunctionMap';
import { ProcessorConfig } from './ProcessorConfig';
import { RuntimeConfig } from './RuntimeConfig';

const pkg = require('../../package.json');

export class RooibosProcessor {
  constructor(config: ProcessorConfig) {

    this._config = config;
    console.log('Running project processor');

    if (!config.projectPath) {
      throw new Error('Config does not contain projectPath property');
    }
    if (!config.sourceFilePattern && config.isRecordingCodeCoverage) {
      throw new Error('Config does not contain sourceFilePattern regex\'s, ' +
        'which are required when recording code coverage');
    }
    if (!config.testsFilePattern) {
      throw new Error('Config does not contain testsFilePattern regex\'s');
    }
  }

  private readonly _config: ProcessorConfig;

  public runtimeConfig: RuntimeConfig;

  get config(): ProcessorConfig {
    return this._config;
  }

  public processFiles() {
    console.log(`Running processor at path ${this.config.projectPath} `);

    let outputText = this.createFileHeaderText();
    let functionMap = new FunctionMap();

    console.log(`Adding runtimeConfig `);
    this.runtimeConfig = new RuntimeConfig(functionMap, this.config);
    this.runtimeConfig.process();

    console.log(`Adding function map `);
    outputText += '\n' + functionMap.getFunctionMapText();
    console.log(`Adding runtime config function `);
    outputText += '\n' + this.getRuntimeConfigText();
    console.log(`Adding version function `);
    outputText += '\n' + this.getVersionText();

    outputText += '\n' + this.createTestsHeaderText();
    outputText += '\n' + this.runtimeConfig.createTestSuiteLookupFunction();
    outputText += '\n' + this.runtimeConfig.createIgnoredTestsInfoFunction();
    outputText += '\n' + this.createFileFooterText();
    let mapFileName = path.join(this.config.projectPath, this.config.outputPath, 'rooibosFunctionMap.brs');
    const file = new File(path.resolve(path.dirname(mapFileName)), path.dirname(mapFileName), path.basename(mapFileName), '.brs');
    file.setFileContents(outputText);
    console.log(`Writing to ${file.fullPath}`);
    file.saveFileContents();

    if (this.config.isRecordingCodeCoverage) {
      console.log(`this is a code coverage build. Adding code coverage calls`);
      let coverageProcessor = new CodeCoverageProcessor(this.config);
      coverageProcessor.process();
    } else {
      console.log(`this is NOT a code coverage build.`);
    }
    this.reportErrors();
    this.reportWarnings();

    if (getFeedbackErrors().length > 0) {
      throw new Error('rooibos-cli failed to parse tests due to reported errors');
    }
  }

  public reportErrors() {
    if (getFeedbackErrors().length > 0) {

      console.log(`
    The following errors occurred during processing:

    ======
    `);
      getFeedbackErrors().forEach((errorText) => console.log(`[ERROR] ${errorText}`));
      console.log(`
    ======
    `);
    }
  }

  public reportWarnings() {
    if (getFeedbackWarnings().length > 0) {

      console.log(`
    The following warnings occurred during processing:

    ======
    `);
      getFeedbackWarnings().forEach((errorText) => console.log(`[WARN] ${errorText}`));
      console.log(`
    ======
    `);
    }
  }

  public createFileHeaderText(): string {
    return `
    '***************************************************
    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)
    ' ***************************************************
    `;
  }

  public createFileFooterText(): string {
    return `

    '***************************************************
    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)
    ' ***************************************************
    `;
  }

  public createTestsHeaderText(): string {
    return `
    '***************************************************
    ' Unit test suites defitintions
    '***************************************************
    `;
  }

  public getRuntimeConfigText(): string {
    return `

    function RBSFM_getRuntimeConfig()
        return {
          "failFast": ${this.config.failFast}
          "logLevel": ${this.config.logLevel}
          "showOnlyFailures": ${this.config.showFailuresOnly}
          "printLcov": ${this.config.printLcov === true}
          "rooibosPreprocessorVersion": ${pkg.version}
          "port": ${this.config.port || 'Invalid'}
          }
    end function
    `;
  }

  public getVersionText(): string {
    return `
    function RBSFM_getPreprocessorVersion()
        return "${pkg.version}"
    end function
    `;
  }
}
